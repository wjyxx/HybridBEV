{
    "sourceFile": "configs/hybirdbev/hybirdbev_max_avg.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1730281797276,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1730281797276,
            "name": "Commit-0",
            "content": "_base_ = [\n    \"../_base_/datasets/nus-3d.py\",\n    \"../_base_/default_runtime.py\",\n]\npoint_cloud_range = [-51.2, -51.2, -5.0, 51.2, 51.2, 3.0]\nclass_names = [\n    \"car\",\n    \"truck\",\n    \"construction_vehicle\",\n    \"bus\",\n    \"trailer\",\n    \"barrier\",\n    \"motorcycle\",\n    \"bicycle\",\n    \"pedestrian\",\n    \"traffic_cone\",\n]\ndownsample = 16\n\nimage_scale = 0.447\ndata_config = {\n    \"cams\": [\n        \"CAM_FRONT_LEFT\",\n        \"CAM_FRONT\",\n        \"CAM_FRONT_RIGHT\",\n        \"CAM_BACK_LEFT\",\n        \"CAM_BACK\",\n        \"CAM_BACK_RIGHT\",\n    ],\n    \"Ncams\": 6,\n    \"input_size\": (256, 704),\n    \"src_size\": (900, 1600),\n    \"image_scale\": False,\n    \"resize\": (-0.06, 0.11),\n    \"rot\": (-5.4, 5.4),\n    \"flip\": True,\n    \"crop_h\": (0.0, 0.0),\n    \"resize_test\": 0.00,\n}\n\ndepth_thres = {\n    \"CAM_FRONT\": 1,\n    \"CAM_FRONT_LEFT\": 0,\n    \"CAM_FRONT_RIGHT\": 0,\n    \"CAM_BACK\": 0.5,\n    \"CAM_BACK_LEFT\": 0,\n    \"CAM_BACK_RIGHT\": 0,\n}\nnum_points = 5\n\n# Model\ngrid_config = {\n    \"xbound\": [-51.2, 51.2, 0.8],\n    \"ybound\": [-51.2, 51.2, 0.8],\n    \"zbound\": [-10.0, 10.0, 20.0],\n    \"dbound\": [1.0, 60.0, 1.0],\n}\n\nvoxel_size = [0.1, 0.1, 0.2]\n# voxel_size = [0.075, 0.075, 0.2]\n\nnumC_Trans = 64\n\nmodel = dict(\n    type=\"HybirdBEV\",\n    is_distill=True,\n    img_backbone=dict(\n        pretrained=\"torchvision://resnet50\",\n        type=\"ResNet\",\n        depth=50,\n        num_stages=4,\n        out_indices=(2, 3),\n        frozen_stages=-1,\n        norm_cfg=dict(type=\"BN\", requires_grad=True),\n        norm_eval=False,\n        with_cp=True,\n        style=\"pytorch\",\n    ),\n    img_neck=dict(\n        type=\"FPNForBEVDet\",\n        in_channels=[1024, 2048],\n        out_channels=512,\n        num_outs=1,\n        start_level=0,\n        out_ids=[0],\n    ),\n    img_view_transformer=dict(\n        type=\"ViewTransformerLSSBEVDepth\",  # ViewTransformerLSSBEVDepth, ViewTransformerLiftSplatShoot\n        loss_depth_weight=100.0,\n        grid_config=grid_config,\n        data_config=data_config,\n        numC_Trans=numC_Trans,\n        extra_depth_net=dict(\n            type=\"ResNetForBEVDet\",\n            numC_input=256,\n            num_layer=[\n                3,\n            ],\n            num_channels=[\n                256,\n            ],\n            stride=[\n                1,\n            ],\n        ),\n    ),\n    hybird_encoder=dict(\n        type=\"HybirdEncoder\",\n        num_cams=6,\n        num_convs=3,\n        num_points=num_points,\n        num_sweeps=1,\n        kernel_size=(3, 3, 3),\n        keep_sweep_dim=True,\n        num_feature_levels=1,\n        embed_dims=128,\n        pc_range=[-51.2, -51.2, -5.0, 51.2, 51.2, 3.0],\n        voxel_shape=[128, 128, num_points],\n        # fp16_enabled=True,\n        encoding=True,\n        conv_dict=dict(\n            in_channels=128,\n            out_channels=128,\n            kernel_size=3,\n            stride=1,\n            padding=1,\n            conv_cfg=dict(type=\"Conv3d\"),\n            norm_cfg=dict(type=\"BN3d\"),\n            act_cfg=dict(type=\"ReLU\"),\n            inplace=True,\n        ),\n    ),\n    pre_process=dict(type=\"SCNET\", input_channels=128, num_layers=5),\n    img_bev_encoder_backbone=dict(type=\"ResNetForBEVDet\", numC_input=numC_Trans),\n    img_bev_encoder_neck=dict(\n        type=\"FPN_LSS\",\n        in_channels=(numC_Trans) * 8 + (numC_Trans) * 2,\n        out_channels=256,\n    ),\n    pts_bbox_head=dict(\n        type=\"CenterHead_task\",\n        task_specific=True,\n        in_channels=sum([256, 0]),\n        tasks=[\n            dict(num_class=1, class_names=[\"car\"]),\n            dict(num_class=2, class_names=[\"truck\", \"construction_vehicle\"]),\n            dict(num_class=2, class_names=[\"bus\", \"trailer\"]),\n            dict(num_class=1, class_names=[\"barrier\"]),\n            dict(num_class=2, class_names=[\"motorcycle\", \"bicycle\"]),\n            dict(num_class=2, class_names=[\"pedestrian\", \"traffic_cone\"]),\n        ],\n        common_heads=dict(\n            reg=(2, 2), height=(1, 2), dim=(3, 2), rot=(2, 2), vel=(2, 2)\n        ),\n        share_conv_channel=64,\n        bbox_coder=dict(\n            type=\"CenterPointBBoxCoder\",\n            pc_range=point_cloud_range[:2],\n            post_center_range=[-61.2, -61.2, -10.0, 61.2, 61.2, 10.0],\n            max_num=500,\n            score_threshold=0.1,\n            out_size_factor=8,\n            voxel_size=voxel_size[:2],\n            code_size=9,\n        ),\n        separate_head=dict(type=\"SeparateHead\", init_bias=-2.19, final_kernel=3),\n        loss_cls=dict(type=\"GaussianFocalLoss\", reduction=\"mean\"),\n        loss_bbox=dict(type=\"L1Loss\", reduction=\"mean\", loss_weight=0.25),\n        norm_bbox=True,\n    ),\n    train_cfg=dict(\n        pts=dict(\n            point_cloud_range=point_cloud_range,\n            grid_size=[1024, 1024, 40],\n            voxel_size=voxel_size,\n            out_size_factor=8,\n            dense_reg=1,\n            gaussian_overlap=0.1,\n            max_objs=500,\n            min_radius=2,\n            code_weights=[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.2, 0.2],\n        )\n    ),\n    test_cfg=dict(\n        pts=dict(\n            pc_range=point_cloud_range[:2],\n            post_center_limit_range=[-61.2, -61.2, -10.0, 61.2, 61.2, 10.0],\n            max_per_img=500,\n            max_pool_nms=False,\n            min_radius=[4, 12, 10, 1, 0.85, 0.175],\n            score_threshold=0.1,\n            out_size_factor=8,\n            voxel_size=voxel_size[:2],\n            pre_max_size=1000,\n            post_max_size=83,\n            # Scale-NMS\n            nms_type=[\"rotate\", \"rotate\", \"rotate\", \"circle\", \"rotate\", \"rotate\"],\n            nms_thr=[0.2, 0.2, 0.2, 0.2, 0.2, 0.5],\n            nms_rescale_factor=[\n                1.0,\n                [0.7, 0.7],\n                [0.4, 0.55],\n                1.1,\n                [1.0, 1.0],\n                [4.5, 9.0],\n            ],\n        )\n    ),\n    teacher_config_file=\"path/to/centerpoint_01voxel_second_secfpn_circlenms_4x8_cyclic_20e_nus.py\",\n    teacher_pretrained=\"path/to/centerpoint_01voxel_second_secfpn_circlenms_4x8_cyclic_20e_nus_20220810_030004-9061688e.pth\",\n    distill_config=dict(\n        teacher_type=\"lidar\",\n        freeze_teacher=True,\n        stu_load_tea_head=True,\n        is_depth_supervise=True,\n        voxel_feats_distill=dict(\n            type=\"VoxelDistill\",\n            criterion=\"mse\",\n            reduction=\"none\",\n            loss_weight=100,\n            train_cfg=dict(\n                point_cloud_range=point_cloud_range,\n                grid_size=[1024, 1024, 40],\n                voxel_size=voxel_size,\n                out_size_factor=8,\n                dense_reg=1,\n                gaussian_overlap=0.1,\n                max_objs=500,\n                min_radius=2,\n                code_weights=[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.2, 0.2],\n            ),\n            class_names=class_names,\n            task_num=6,\n        ),\n        dfd_distill=dict(\n            low_level_distill_loss=dict(\n                type=\"CriterionCWD_KD\",\n                norm_type=\"channel\",\n                divergence=\"kl\",\n                temperature=4,\n                params_weight=10,\n            ),\n            loss_type=\"bev-v1\",\n        ),\n        sd_distill=dict(\n            is_multi_scale_distill=False,\n            multi_scale_distill_loss=dict(\n                type=\"MultiScaleFeatsDistill\",\n                lvls=2,\n                compress=\"mean\",\n                lossMeanWeight=10,  # 1, 10, 100\n                dist=True,\n            ),\n        ),\n        high_level_distill=dict(\n            is_high_level_distill=False,\n            duplicate_highlevl_stu_feat=False,\n            high_level_distill_loss=dict(\n                type=\"SimpleMSE\", param_weight=10, compress=\"mean\"\n            ),\n        ),\n        s_conv_modify=dict(in_channel=[16, 32, 64, 128]),\n    ),\n)\n\n\ndataset_type = \"NuScenesDataset\"\ndata_root = \"data/nuscenes/\"\nfile_client_args = dict(backend=\"disk\")\n\ntrain_pipeline = [\n    dict(\n        type=\"LoadMultiViewImageFromFiles_BEVDet\",\n        is_train=True,\n        data_config=data_config,\n    ),\n    dict(\n        type=\"LoadPointsFromFile\",\n        coord_type=\"LIDAR\",\n        load_dim=5,\n        use_dim=5,\n        file_client_args=file_client_args,\n    ),\n    dict(\n        type=\"LoadPointsFromMultiSweeps\",\n        sweeps_num=9,\n        use_dim=[0, 1, 2, 3, 4],\n        file_client_args=file_client_args,\n        pad_empty_sweeps=True,\n        remove_close=True,\n    ),\n    dict(type=\"LoadAnnotations3D\", with_bbox_3d=True, with_label_3d=True),\n    # dict(\n    #     type=\"GlobalRotScaleTrans\",\n    #     rot_range=[-0.3925, 0.3925],\n    #     scale_ratio_range=[0.95, 1.05],\n    #     translation_std=[0, 0, 0],\n    #     update_img2lidar=True,\n    # ),\n    # dict(\n    #     type=\"RandomFlip3D\",\n    #     sync_2d=False,\n    #     flip_ratio_bev_horizontal=0.5,\n    #     flip_ratio_bev_vertical=0.5,\n    #     update_img2lidar=True,\n    # ),\n    dict(type=\"PointToMultiViewDepth\", grid_config=grid_config),\n    dict(type=\"ObjectRangeFilter\", point_cloud_range=point_cloud_range),\n    dict(type=\"ObjectNameFilter\", classes=class_names),\n    dict(type=\"DefaultFormatBundle3D\", class_names=class_names),\n    dict(\n        type=\"Collect3D\",\n        keys=[\"points\", \"img_inputs\", \"gt_bboxes_3d\", \"gt_labels_3d\"],\n        meta_keys=(\n            \"filename\",\n            \"ori_shape\",\n            \"img_shape\",\n            \"lidar2img\",\n            \"depth2img\",\n            \"cam2img\",\n            \"pad_shape\",\n            \"scale_factor\",\n            \"flip\",\n            \"pcd_horizontal_flip\",\n            \"pcd_vertical_flip\",\n            \"box_mode_3d\",\n            \"box_type_3d\",\n            \"img_norm_cfg\",\n            \"pcd_trans\",\n            \"sample_idx\",\n            \"pcd_scale_factor\",\n            \"pcd_rotation\",\n            \"pts_filename\",\n            \"transformation_3d_flow\",\n            \"img_info\",\n        ),\n    ),\n]\n\ntest_pipeline = [\n    dict(type=\"LoadMultiViewImageFromFiles_BEVDet\", data_config=data_config),\n    dict(\n        type=\"LoadPointsFromFile\",\n        coord_type=\"LIDAR\",\n        load_dim=5,\n        use_dim=5,\n        file_client_args=file_client_args,\n    ),\n    dict(\n        type=\"LoadPointsFromMultiSweeps\",\n        sweeps_num=9,\n        use_dim=[0, 1, 2, 3, 4],\n        file_client_args=file_client_args,\n        pad_empty_sweeps=True,\n        remove_close=True,\n    ),\n    dict(type=\"PointToMultiViewDepth\", grid_config=grid_config),\n    dict(\n        type=\"MultiScaleFlipAug3D\",\n        img_scale=(1333, 800),\n        pts_scale_ratio=1,\n        flip=False,\n        transforms=[\n            dict(\n                type=\"DefaultFormatBundle3D\", class_names=class_names, with_label=False\n            ),\n            dict(type=\"Collect3D\", keys=[\"points\", \"img_inputs\"]),\n        ],\n    ),\n]\neval_pipeline = [\n    dict(type=\"LoadMultiViewImageFromFiles_BEVDet\", data_config=data_config),\n    dict(\n        type=\"LoadPointsFromFile\",\n        coord_type=\"LIDAR\",\n        load_dim=5,\n        use_dim=5,\n        file_client_args=file_client_args,\n    ),\n    dict(\n        type=\"LoadPointsFromMultiSweeps\",\n        sweeps_num=9,\n        use_dim=[0, 1, 2, 3, 4],\n        file_client_args=file_client_args,\n        pad_empty_sweeps=True,\n        remove_close=True,\n    ),\n    dict(type=\"PointToMultiViewDepth\", grid_config=grid_config),\n    dict(type=\"DefaultFormatBundle3D\", class_names=class_names, with_label=False),\n    dict(type=\"Collect3D\", keys=[\"img_inputs\"]),\n]\n\ninput_modality = dict(\n    use_lidar=False, use_camera=True, use_radar=False, use_map=False, use_external=False\n)\n\ndata = dict(\n    samples_per_gpu=2,\n    workers_per_gpu=4,\n    dataset_scale=8,\n    train=dict(\n        type=\"CBGSDataset\",\n        dataset=dict(\n            type=dataset_type,\n            data_root=data_root,\n            ann_file=data_root + \"nuscenes_infos_train.pkl\",\n            pipeline=train_pipeline,\n            classes=class_names,\n            test_mode=False,\n            use_valid_flag=True,\n            modality=input_modality,\n            box_type_3d=\"LiDAR\",\n            img_info_prototype=\"bevdet\",\n        ),\n    ),\n    val=dict(\n        pipeline=test_pipeline,\n        classes=class_names,\n        modality=input_modality,\n        img_info_prototype=\"bevdet\",\n    ),\n    test=dict(\n        pipeline=test_pipeline,\n        classes=class_names,\n        modality=input_modality,\n        img_info_prototype=\"bevdet\",\n    ),\n)\n\n\nevaluation = dict(interval=1, pipeline=test_pipeline)\n\n# Optimizer\noptimizer = dict(type=\"AdamW\", lr=2e-4, weight_decay=1e-2)\noptimizer_config = dict(grad_clip=dict(max_norm=5, norm_type=2))\nlr_config = dict(\n    policy=\"step\", warmup=\"linear\", warmup_iters=200, warmup_ratio=0.001, step=[16, 19]\n)\nrunner = dict(type=\"EpochBasedRunner\", max_epochs=20)\nwork_dir = \"hybirdbev/max-avg\"\n"
        }
    ]
}